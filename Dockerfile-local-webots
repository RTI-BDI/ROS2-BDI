FROM ros:humble

SHELL ["/bin/bash", "-c"]

WORKDIR /root

# Update to latest version
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ="Europe/London"
RUN apt-get update

RUN apt-get install -y vim gdb terminator screen

# install ros package
RUN apt-get update && apt-get install -y \
      ros-${ROS_DISTRO}-desktop \
      ros-${ROS_DISTRO}-demo-nodes-cpp \
      ros-${ROS_DISTRO}-demo-nodes-py



# install plansys2
RUN mkdir -p ~/plansys2_ws/src && \
    cd ~/plansys2_ws/src && \
    git clone https://github.com/IntelligentRoboticsLabs/ros2_planning_system.git && \
    git clone https://github.com/IntelligentRoboticsLabs/ros2_planning_system_examples.git && \
    cd ~/plansys2_ws && \
    rosdep install -y -r -q --from-paths src --ignore-src --rosdistro ${ROS_DISTRO}

RUN cd ~/plansys2_ws && \
    source /opt/ros/${ROS_DISTRO}/setup.bash && \
    colcon build --symlink-install

# source entrypoint setup
RUN sed --in-place --expression \
      '$isource "/root/plansys2_ws/install/setup.bash"' \
      /ros_entrypoint.sh




# install libboost-dev
RUN apt-get update && apt-get install -y libboost-dev

# install libyaml (0.6 and not apt-get install libyaml-cpp0.7)
RUN git clone --depth 1 --branch yaml-cpp-0.6.0 https://github.com/jbeder/yaml-cpp.git && \
    cd yaml-cpp && \
    mkdir build && \
    cd build && \
    cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr -DYAML_BUILD_SHARED_LIBS=ON -DCMAKE_POSITION_INDEPENDENT_CODE=ON .. && \
    make && \
    make install
# RUN ls /usr/lib/cmake/yaml-cpp
ENV LD_LIBRARY_PATH /usr/local/lib:/usr/lib:$LD_LIBRARY_PATH
ENV CMAKE_PREFIX_PATH /usr/lib/cmake:$CMAKE_PREFIX_PATH




# setup webots_ros2_driver
# To run webots on local host need to set ENV WEBOTS_SHARED_FOLDER ~/shared:/root/shared and mount shared folder
RUN apt install -y iproute2

# install webots_ros2_driver from distributed pagkage
# https://docs.ros.org/en/iron/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.html
RUN apt install -y ros-humble-webots-ros2

# install webots_ros2_driver from sources (with fix for mac to connect to host webots_local_server)
# RUN mkdir -p ~/webots_ros2_driver_ws/src && \
#     cd ~/webots_ros2_driver_ws/src && \
#     git clone --recurse-submodules --depth 1 --branch docker https://github.com/marcorobol/webots_ros2.git

# RUN cd ~/webots_ros2_driver_ws && \
#     rosdep update

# RUN cd ~/webots_ros2_driver_ws && \
#     NUM_CORES=$(nproc) && \
#     export MAKEFLAGS="-j$NUM_CORES" && \
#     export AMENT_BUILD_GRADLE_ARGS="-j$NUM_CORES" && \
#     export AMENT_BUILD_MAKE_ARGS="-j$NUM_CORES" && \
#     rosdep install -y -r -q --from-paths src --ignore-src --rosdistro ${ROS_DISTRO}

# RUN cd ~/webots_ros2_driver_ws && \
#     source /opt/ros/${ROS_DISTRO}/setup.bash && \
#     NUM_CORES=$(nproc) && \
#     export MAKEFLAGS="-j$NUM_CORES" && \
#     export AMENT_BUILD_GRADLE_ARGS="-j$NUM_CORES" && \
#     export AMENT_BUILD_MAKE_ARGS="-j$NUM_CORES" && \
#     colcon build --symlink-install

# # source entrypoint setup
# RUN sed --in-place --expression \
#       '$isource "/root/webots_ros2_driver_ws/install/setup.bash"' \
#       /ros_entrypoint.sh




# install ros2bdi 
# VOLUME /root/ros2bdi_ws/src/ROS2-BDI
COPY . /root/ros2bdi_ws/src/ROS2-BDI
COPY build.sh /root/ros2bdi_ws

RUN source /root/plansys2_ws/install/setup.bash && \
    cd ~/ros2bdi_ws && \
    colcon build --packages-select ros2_bdi_interfaces

# RUN rm -rf /root/ros2bdi_ws/build/ros2_bdi_interfaces

RUN NUM_CORES=$(nproc) && \
    export MAKEFLAGS="-j$NUM_CORES" && \
    export AMENT_BUILD_GRADLE_ARGS="-j$NUM_CORES" && \
    export AMENT_BUILD_MAKE_ARGS="-j$NUM_CORES" && \
    source /root/plansys2_ws/install/setup.bash && \
    cd ~/ros2bdi_ws && \
    colcon build --packages-select ros2_bdi_utils ros2_bdi_skills ros2_bdi_bringup ros2_bdi_core --packages-skip ros2_bdi_interfaces

RUN NUM_CORES=$(nproc) && \
    export MAKEFLAGS="-j$NUM_CORES" && \
    export AMENT_BUILD_GRADLE_ARGS="-j$NUM_CORES" && \
    export AMENT_BUILD_MAKE_ARGS="-j$NUM_CORES" && \
    source /root/plansys2_ws/install/setup.bash && \
    cd ~/ros2bdi_ws && \
    colcon build --symlink-install --packages-ignore ros2_bdi_tests --packages-skip ros2_bdi_interfaces ros2_bdi_utils ros2_bdi_skills ros2_bdi_bringup ros2_bdi_core
    
RUN NUM_CORES=$(nproc) && \
    export MAKEFLAGS="-j$NUM_CORES" && \
    export AMENT_BUILD_GRADLE_ARGS="-j$NUM_CORES" && \
    export AMENT_BUILD_MAKE_ARGS="-j$NUM_CORES" && \
    source /root/ros2bdi_ws/install/setup.bash && \
    cd ~/ros2bdi_ws && \
    colcon build --symlink-install --packages-select ros2_bdi_tests

# RUN NUM_CORES=$(nproc) && \
#     export MAKEFLAGS="-j$NUM_CORES" && \
#     export AMENT_BUILD_GRADLE_ARGS="-j$NUM_CORES" && \
#     export AMENT_BUILD_MAKE_ARGS="-j$NUM_CORES" && \
#     source /root/plansys2_ws/install/setup.bash && \
#     cd ~/ros2bdi_ws && \
#     colcon build --symlink-install --packages-select webots_ros2_simulations_interfaces webots_ros2_simulations ros2_bdi_on_webots

ENV RCUTILS_LOGGING_USE_STDOUT 1
ENV RCUTILS_LOGGING_BUFFERED_STREAM 0

# source entrypoint setup
RUN sed --in-place --expression \
      '$isource "/root/ros2bdi_ws/install/setup.bash"' \
      /ros_entrypoint.sh




CMD ["/bin/bash", "-c", \
    "source /root/ros2bdi_ws/install/setup.bash && source /opt/ros/humble/setup.bash && source /root/plansys2_ws/install/setup.bash"]


# build
# sudo docker build --platform=linux/amd64 --rm  --tag ros2bdi-local-webots --file Dockerfile-local-webots .

# run world
# docker run --platform=linux/amd64 -v .:/root/ros2bdi_ws/src/ROS2-BDI -v /Users/Shared/shared:/root/shared -e "WEBOTS_SHARED_FOLDER=/Users/Shared/shared:/root/shared" --rm -it --name ros2bdi ros2bdi-local-webots ros2 launch webots_ros2_simulations blocks_world.launch.py
# 
# and then agents
# docker run --platform=linux/amd64 -v ./tmp:/tmp --rm -it ros2bdi-local-webots ros2 launch ros2_bdi_on_webots carrier_a.launch.py
# docker run --platform=linux/amd64 -v ./tmp:/tmp --rm -it ros2bdi-local-webots ros2 launch ros2_bdi_on_webots carrier_b.launch.py
# docker run --platform=linux/amd64 -v ./tmp:/tmp --rm -it ros2bdi-local-webots ros2 launch ros2_bdi_on_webots carrier_c.launch.py
# docker run --platform=linux/amd64 -v ./tmp:/tmp --rm -it ros2bdi-local-webots ros2 launch ros2_bdi_on_webots gripper_a.launch.py
#
# or run agents in the same container of world
# docker exec -it ros2bdi bash -c "source /root/ros2bdi_ws/install/setup.bash && ros2 launch ros2_bdi_on_webots carrier_a.launch.py"
# docker exec -it ros2bdi bash -c "source /root/ros2bdi_ws/install/setup.bash && ros2 launch ros2_bdi_on_webots carrier_b.launch.py"
# docker exec -it ros2bdi bash -c "source /root/ros2bdi_ws/install/setup.bash && ros2 launch ros2_bdi_on_webots carrier_c.launch.py" 
# docker exec -it ros2bdi bash -c "source /root/ros2bdi_ws/install/setup.bash && ros2 launch ros2_bdi_on_webots gripper_a.launch.py"
# 
# or run everything at once
# docker run --platform=linux/amd64 -v .:/root/ros2bdi_ws/src/ROS2-BDI -v /Users/Shared/shared:/root/shared -e "WEBOTS_SHARED_FOLDER=/Users/Shared/shared:/root/shared" --rm -it --name ros2bdi ros2bdi-local-webots \
# bash -c "\
# source /root/ros2bdi_ws/install/setup.bash & sleep 5 && \
# ros2 launch webots_ros2_simulations blocks_world.launch.py & sleep 5 && \
# ros2 launch ros2_bdi_on_webots carrier_a.launch.py & sleep 5 && \
# ros2 launch ros2_bdi_on_webots carrier_b.launch.py & sleep 5 && \
# ros2 launch ros2_bdi_on_webots carrier_c.launch.py & sleep 5 && \
# ros2 launch ros2_bdi_on_webots gripper_a.launch.py \
# " 
# 
# First of all, to use webots on host machine (while ros2bdi on docker):
# MAC: export WEBOTS_HOME=/Applications/Webots.app
# LINUX: export WEBOTS_HOME=/usr/local/webots
# export WEBOTS_HOME_PATH=$WEBOTS_HOME/Contents # This should not be necessary
# python3 local_simulation_server.py
#
# On mac, because of network of docker virtual machine, need also to forward request from docker VM to host machine
# docker run --rm -d --name=forwarder-container2000 --network=host alpine/socat TCP-LISTEN:2000,fork TCP:host.docker.internal:2000
# docker run --rm -d --name=forwarder-container1234 --network=host alpine/socat TCP-LISTEN:1234,fork TCP:host.docker.internal:1234
